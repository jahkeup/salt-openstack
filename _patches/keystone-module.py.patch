diff --git a/salt/modules/keystone.py b/salt/modules/keystone.py
index 12bffd4..d8451f2 100644
--- a/salt/modules/keystone.py
+++ b/salt/modules/keystone.py
@@ -10,7 +10,6 @@ Module for handling openstack keystone calls.
         keystone.password: verybadpass
         keystone.tenant: admin
         keystone.tenant_id: f80919baedab48ec8931f200c65a50df
-        keystone.insecure: False   #(optional)
         keystone.auth_url: 'http://127.0.0.1:5000/v2.0/'
 
         OR (for token based authentication)
@@ -65,12 +64,13 @@ def __virtual__():
 __opts__ = {}
 
 
-def auth(profile=None):
+def auth(profile=None, **connection_args):
     '''
     Set up keystone credentials
 
     Only intended to be used within Keystone-enabled modules
     '''
+
     if profile:
         user = __salt__['config.get']('{0}:keystone.user'.format(profile), 'admin')
         password = __salt__['config.get']('{0}:keystone.password'.format(profile), 'ADMIN')
@@ -82,6 +82,16 @@ def auth(profile=None):
         token = __salt__['config.get']('{0}:keystone.token'.format(profile))
         endpoint = __salt__['config.get']('{0}:keystone.endpoint'.format(profile),
                                              'http://127.0.0.1:35357/v2.0')
+    if connection_args:
+        user = connection_args.get('connection_user', 'admin')
+        password = connection_args.get('connection_pass', 'ADMIN')
+        tenant = connection_args.get('connection_tenant', 'admin')
+        tenant_id = connection_args.get('connection_tenant_id')
+        auth_url = connection_args.get('connection_auth_url',
+                                       'http://127.0.0.1:35357/v2.0/')
+        insecure = connection_args.get('connection_insecure', False)
+        endpoint = connection_args.get('connection_endpoint',
+                                       'http://127.0.0.1:35357/v2.0/')
     else:
         user = __salt__['config.get']('keystone.user', 'admin')
         password = __salt__['config.get']('keystone.password', 'ADMIN')
@@ -114,7 +124,7 @@ def auth(profile=None):
 
 def ec2_credentials_create(user_id=None, name=None,
                            tenant_id=None, tenant=None,
-                           profile=None):
+                           profile=None, **connection_args):
     '''
     Create EC2-compatibile credentials for user per tenant
 
@@ -127,15 +137,17 @@ def ec2_credentials_create(user_id=None, name=None,
             user_id=c965f79c4f864eaaa9c3b41904e67082 \
             tenant_id=722787eb540849158668370dc627ec5f
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
 
     if name:
-        user_id = user_get(name=name)[name]['id']
+        user_id = user_get(name=name, profile=profile,
+                           **connection_args)[name]['id']
     if not user_id:
         return {'Error': 'Could not resolve User ID'}
 
     if tenant:
-        tenant_id = tenant_get(name=tenant)[tenant]['id']
+        tenant_id = tenant_get(name=tenant, profile=profile,
+                               **connection_args)[tenant]['id']
     if not tenant_id:
         return {'Error': 'Could not resolve Tenant ID'}
 
@@ -146,8 +158,8 @@ def ec2_credentials_create(user_id=None, name=None,
             'user_id': newec2.user_id}
 
 
-def ec2_credentials_delete(user_id=None, name=None,
-                           access_key=None, profile=None):
+def ec2_credentials_delete(user_id=None, name=None, access_key=None,
+                           profile=None, **connection_args):
     '''
     Delete EC2-compatibile credentials
 
@@ -161,10 +173,10 @@ def ec2_credentials_delete(user_id=None, name=None,
         salt '*' keystone.ec2_credentials_delete name=admin \
             access_key=5f66d2f24f604b8bb9cd28886106f442
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
 
     if name:
-        user_id = user_get(name=name)[name]['id']
+        user_id = user_get(name=name, profile=None, **connection_args)[name]['id']
     if not user_id:
         return {'Error': 'Could not resolve User ID'}
     kstone.ec2.delete(user_id, access_key)
@@ -172,10 +184,8 @@ def ec2_credentials_delete(user_id=None, name=None,
                                                               user_id)
 
 
-def ec2_credentials_get(user_id=None,
-                        name=None,
-                        access=None,
-                        profile=None):
+def ec2_credentials_get(user_id=None, name=None, access=None,
+                        profile=None, **connection_args):
     '''
     Return ec2_credentials for a user (keystone ec2-credentials-get)
 
@@ -187,7 +197,7 @@ def ec2_credentials_get(user_id=None,
         salt '*' keystone.ec2_credentials_get user_id=c965f79c4f864eaaa9c3b41904e67082 access=722787eb540849158668370dc627ec5f
         salt '*' keystone.ec2_credentials_get name=nova access=722787eb540849158668370dc627ec5f
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     if name:
         for user in kstone.users.list():
@@ -198,7 +208,8 @@ def ec2_credentials_get(user_id=None,
         return {'Error': 'Unable to resolve user id'}
     if not access:
         return {'Error': 'Access key is required'}
-    ec2_credentials = kstone.ec2.get(user_id=user_id, access=access)
+    ec2_credentials = kstone.ec2.get(user_id=user_id, access=access,
+                                     profile=profile, **connection_args)
     ret[ec2_credentials.user_id] = {'user_id': ec2_credentials.user_id,
                                     'tenant': ec2_credentials.tenant_id,
                                     'access': ec2_credentials.access,
@@ -206,7 +217,8 @@ def ec2_credentials_get(user_id=None,
     return ret
 
 
-def ec2_credentials_list(user_id=None, name=None, profile=None):
+def ec2_credentials_list(user_id=None, name=None, profile=None,
+                         **connection_args):
     '''
     Return a list of ec2_credentials for a specific user (keystone ec2-credentials-list)
 
@@ -218,7 +230,7 @@ def ec2_credentials_list(user_id=None, name=None, profile=None):
         salt '*' keystone.ec2_credentials_list user_id=298ce377245c4ec9b70e1c639c89e654
         salt '*' keystone.ec2_credentials_list name=jack
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     if name:
         for user in kstone.users.list():
@@ -235,7 +247,7 @@ def ec2_credentials_list(user_id=None, name=None, profile=None):
     return ret
 
 
-def endpoint_get(service, profile=None):
+def endpoint_get(service, profile=None, **connection_args):
     '''
     Return a specific endpoint (keystone endpoint-get)
 
@@ -245,11 +257,11 @@ def endpoint_get(service, profile=None):
 
         salt '*' keystone.endpoint_get ec2
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     return kstone.service_catalog.url_for(service_type=service)
 
 
-def endpoint_list(profile=None):
+def endpoint_list(profile=None, **connection_args):
     '''
     Return a list of available endpoints (keystone endpoints-list)
 
@@ -259,7 +271,7 @@ def endpoint_list(profile=None):
 
         salt '*' keystone.endpoint_list
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     for endpoint in kstone.endpoints.list():
         ret[endpoint.id] = {'id': endpoint.id,
@@ -271,7 +283,7 @@ def endpoint_list(profile=None):
     return ret
 
 
-def role_create(name, profile=None):
+def role_create(name, profile=None, **connection_args):
     '''
     Create named role
 
@@ -280,14 +292,15 @@ def role_create(name, profile=None):
         salt '*' keystone.role_create admin
     '''
 
-    kstone = auth(profile)
-    if 'Error' not in role_get(name=name):
+    kstone = auth(profile, **connection_args)
+    if 'Error' not in role_get(name=name, profile=profile, **connection_args):
         return {'Error': 'Role "{0}" already exists'.format(name)}
     role = kstone.roles.create(name)
-    return role_get(name=name)
+    return role_get(name=name, profile=profile, **connection_args)
 
 
-def role_delete(role_id=None, name=None, profile=None):
+def role_delete(role_id=None, name=None, profile=None,
+                **connection_args):
     '''
     Delete a role (keystone role-delete)
 
@@ -299,7 +312,7 @@ def role_delete(role_id=None, name=None, profile=None):
         salt '*' keystone.role_delete role_id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.role_delete name=admin
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
 
     if name:
         for role in kstone.roles.list():
@@ -308,7 +321,7 @@ def role_delete(role_id=None, name=None, profile=None):
                 break
     if not role_id:
         return {'Error': 'Unable to resolve role id'}
-    role = role_get(role_id)
+    role = role_get(role_id, profile=profile, **connection_args)
     kstone.roles.delete(role)
     ret = 'Role ID {0} deleted'.format(role_id)
     if name:
@@ -316,7 +329,7 @@ def role_delete(role_id=None, name=None, profile=None):
     return ret
 
 
-def role_get(role_id=None, name=None, profile=None):
+def role_get(role_id=None, name=None, profile=None, **connection_args):
     '''
     Return a specific roles (keystone role-get)
 
@@ -328,7 +341,7 @@ def role_get(role_id=None, name=None, profile=None):
         salt '*' keystone.role_get role_id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.role_get name=nova
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     if name:
         for role in kstone.roles.list():
@@ -343,7 +356,7 @@ def role_get(role_id=None, name=None, profile=None):
     return ret
 
 
-def role_list(profile=None):
+def role_list(profile=None, **connection_args):
     '''
     Return a list of available roles (keystone role-list)
 
@@ -353,7 +366,7 @@ def role_list(profile=None):
 
         salt '*' keystone.role_list
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     for role in kstone.roles.list():
         ret[role.name] = {'id': role.id,
@@ -361,7 +374,8 @@ def role_list(profile=None):
     return ret
 
 
-def service_create(name, service_type, description=None, profile=None):
+def service_create(name, service_type, description=None, profile=None,
+                   **connection_args):
     '''
     Add service to Keystone service catalog
 
@@ -372,12 +386,12 @@ def service_create(name, service_type, description=None, profile=None):
         salt '*' keystone.service_create nova compute \
                 'OpenStack Compute Service'
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     service = kstone.services.create(name, service_type, description)
-    return service_get(service.id)
+    return service_get(service.id, profile=profile, **connection_args)
 
 
-def service_delete(service_id=None, name=None, profile=None):
+def service_delete(service_id=None, name=None, profile=None, **connection_args):
     '''
     Delete a service from Keystone service catalog
 
@@ -390,12 +404,13 @@ def service_delete(service_id=None, name=None, profile=None):
     '''
     kstone = auth(profile)
     if name:
-        service_id = service_get(name=name)[name]['id']
+        service_id = service_get(name=name, profile=profile,
+                                 **connection_args)[name]['id']
     service = kstone.services.delete(service_id)
     return 'Keystone service ID "{0}" deleted'.format(service_id)
 
 
-def service_get(service_id=None, name=None, profile=None):
+def service_get(service_id=None, name=None, profile=None, **connection_args):
     '''
     Return a specific services (keystone service-get)
 
@@ -407,7 +422,7 @@ def service_get(service_id=None, name=None, profile=None):
         salt '*' keystone.service_get service_id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.service_get name=nova
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     if name:
         for service in kstone.services.list():
@@ -424,7 +439,7 @@ def service_get(service_id=None, name=None, profile=None):
     return ret
 
 
-def service_list(profile=None):
+def service_list(profile=None, **connection_args):
     '''
     Return a list of available services (keystone services-list)
 
@@ -434,7 +449,7 @@ def service_list(profile=None):
 
         salt '*' keystone.service_list
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     for service in kstone.services.list():
         ret[service.name] = {'id': service.id,
@@ -444,7 +459,8 @@ def service_list(profile=None):
     return ret
 
 
-def tenant_create(name, description=None, enabled=True, profile=None):
+def tenant_create(name, description=None, enabled=True, profile=None,
+                  **connection_args):
     '''
     Create a keystone tenant
 
@@ -455,12 +471,12 @@ def tenant_create(name, description=None, enabled=True, profile=None):
         salt '*' keystone.tenant_create nova description='nova tenant'
         salt '*' keystone.tenant_create test enabled=False
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     new = kstone.tenants.create(name, description, enabled)
-    return tenant_get(new.id)
+    return tenant_get(new.id, profile=profile, **connection_args)
 
 
-def tenant_delete(tenant_id=None, name=None, profile=None):
+def tenant_delete(tenant_id=None, name=None, profile=None, **connection_args):
     '''
     Delete a tenant (keystone tenant-delete)
 
@@ -472,7 +488,7 @@ def tenant_delete(tenant_id=None, name=None, profile=None):
         salt '*' keystone.tenant_delete tenant_id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.tenant_delete name=demo
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     if name:
         for tenant in kstone.tenants.list():
             if tenant.name == name:
@@ -483,11 +499,13 @@ def tenant_delete(tenant_id=None, name=None, profile=None):
     kstone.tenants.delete(tenant_id)
     ret = 'Tenant ID {0} deleted'.format(tenant_id)
     if name:
+
         ret += ' ({0})'.format(name)
     return ret
 
 
-def tenant_get(tenant_id=None, name=None, profile=None):
+def tenant_get(tenant_id=None, name=None, profile=None,
+               **connection_args):
     '''
     Return a specific tenants (keystone tenant-get)
 
@@ -499,7 +517,7 @@ def tenant_get(tenant_id=None, name=None, profile=None):
         salt '*' keystone.tenant_get tenant_id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.tenant_get name=nova
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     if name:
         for tenant in kstone.tenants.list():
@@ -516,7 +534,7 @@ def tenant_get(tenant_id=None, name=None, profile=None):
     return ret
 
 
-def tenant_list(profile=None):
+def tenant_list(profile=None, **connection_args):
     '''
     Return a list of available tenants (keystone tenants-list)
 
@@ -526,7 +544,7 @@ def tenant_list(profile=None):
 
         salt '*' keystone.tenant_list
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     for tenant in kstone.tenants.list():
         ret[tenant.name] = {'id': tenant.id,
@@ -537,7 +555,7 @@ def tenant_list(profile=None):
 
 
 def tenant_update(tenant_id=None, name=None, email=None,
-                  enabled=None, profile=None):
+                  enabled=None, profile=None, **connection_args):
     '''
     Update a tenant's information (keystone tenant-update)
     The following fields may be updated: name, email, enabled.
@@ -550,7 +568,7 @@ def tenant_update(tenant_id=None, name=None, email=None,
         salt '*' keystone.tenant_update name=admin enabled=True
         salt '*' keystone.tenant_update c965f79c4f864eaaa9c3b41904e67082 name=admin email=admin@domain.com
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     if not tenant_id:
         for tenant in kstone.tenants.list():
             if tenant.name == name:
@@ -569,7 +587,7 @@ def tenant_update(tenant_id=None, name=None, email=None,
     kstone.tenants.update(tenant_id, name, email, enabled)
 
 
-def token_get(profile=None):
+def token_get(profile=None, **connection_args):
     '''
     Return the configured tokens (keystone token-get)
 
@@ -579,7 +597,7 @@ def token_get(profile=None):
 
         salt '*' keystone.token_get c965f79c4f864eaaa9c3b41904e67082
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     token = kstone.service_catalog.get_token()
     return {'id': token['id'],
             'expires': token['expires'],
@@ -587,7 +605,7 @@ def token_get(profile=None):
             'tenant_id': token['tenant_id']}
 
 
-def user_list(profile=None):
+def user_list(profile=None, connection_args):
     '''
     Return a list of available users (keystone user-list)
 
@@ -597,7 +615,7 @@ def user_list(profile=None):
 
         salt '*' keystone.user_list
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     for user in kstone.users.list():
         ret[user.name] = {'id': user.id,
@@ -608,7 +626,7 @@ def user_list(profile=None):
     return ret
 
 
-def user_get(user_id=None, name=None, profile=None):
+def user_get(user_id=None, name=None, profile=None, **connection_args):
     '''
     Return a specific users (keystone user-get)
 
@@ -620,7 +638,7 @@ def user_get(user_id=None, name=None, profile=None):
         salt '*' keystone.user_get user_id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.user_get name=nova
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     if name:
         for user in kstone.users.list():
@@ -639,7 +657,7 @@ def user_get(user_id=None, name=None, profile=None):
 
 
 def user_create(name, password, email, tenant_id=None,
-                enabled=True, profile=None):
+                enabled=True, profile=None, **connection_args):
     '''
     Create a user (keystone user-create)
 
@@ -649,13 +667,13 @@ def user_create(name, password, email, tenant_id=None,
 
         salt '*' keystone.user_create name=jack password=zero email=jack@halloweentown.org tenant_id=a28a7b5a999a455f84b1f5210264375e enabled=True
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     item = kstone.users.create(name=name,
                                password=password,
                                email=email,
                                tenant_id=tenant_id,
                                enabled=enabled)
-    return user_get(item.id)
+    return user_get(item.id, profile=profile, **connection_args)
 
 
 def user_delete(user_id=None, name=None, profile=None):
@@ -670,7 +688,7 @@ def user_delete(user_id=None, name=None, profile=None):
         salt '*' keystone.user_delete user_id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.user_delete name=nova
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     if name:
         for user in kstone.users.list():
             if user.name == name:
@@ -681,16 +699,13 @@ def user_delete(user_id=None, name=None, profile=None):
     kstone.users.delete(user_id)
     ret = 'User ID {0} deleted'.format(user_id)
     if name:
+
         ret += ' ({0})'.format(name)
     return ret
 
 
-def user_update(user_id=None,
-                name=None,
-                email=None,
-                enabled=None,
-                tenant=None,
-                profile=None):
+def user_update(user_id=None, name=None, email=None, enabled=None,
+                tenant=None, profile=None, **connection_args):
     '''
     Update a user's information (keystone user-update)
     The following fields may be updated: name, email, enabled, tenant.
@@ -703,7 +718,7 @@ def user_update(user_id=None,
         salt '*' keystone.user_update user_id=c965f79c4f864eaaa9c3b41904e67082 name=newname
         salt '*' keystone.user_update c965f79c4f864eaaa9c3b41904e67082 name=newname email=newemail@domain.com
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     if not user_id:
         for user in kstone.users.list():
             if user.name == name:
@@ -730,10 +745,8 @@ def user_update(user_id=None,
     return ret
 
 
-def user_verify_password(user_id=None,
-                         name=None,
-                         password=None,
-                         profile=None):
+def user_verify_password(user_id=None, name=None, password=None,
+                         profile=None, **connection_args):
     '''
     Verify a user's password
 
@@ -744,9 +757,13 @@ def user_verify_password(user_id=None,
         salt '*' keystone.user_verify_password name=test password=foobar
         salt '*' keystone.user_verify_password user_id=c965f79c4f864eaaa9c3b41904e67082 password=foobar
     '''
-    kstone = auth(profile)
-    auth_url = __salt__['config.option']('keystone.endpoint',
+    kstone = auth(profile, **connection_args)
+    if 'connection_endpoint' in connection_args:
+        auth_url = connection_args.get('connection_endpoint')
+    else:
+        auth_url = __salt__['config.option']('keystone.endpoint',
                                          'http://127.0.0.1:35357/v2.0')
+
     if user_id:
         for user in kstone.users.list():
             if user.id == user_id:
@@ -764,10 +781,8 @@ def user_verify_password(user_id=None,
     return True
 
 
-def user_password_update(user_id=None,
-                         name=None,
-                         password=None,
-                         profile=None):
+def user_password_update(user_id=None, name=None, password=None,
+                         profile=None, **connection_args):
     '''
     Update a user's password (keystone user-password-update)
 
@@ -779,7 +794,7 @@ def user_password_update(user_id=None,
         salt '*' keystone.user_delete user_id=c965f79c4f864eaaa9c3b41904e67082 password=12345
         salt '*' keystone.user_delete name=nova password=12345
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     if name:
         for user in kstone.users.list():
             if user.name == name:
@@ -794,10 +809,9 @@ def user_password_update(user_id=None,
     return ret
 
 
-def user_role_add(user_id=None, user=None,
-                  tenant_id=None, tenant=None,
-                  role_id=None, role=None,
-                  profile=None):
+def user_role_add(user_id=None, user=None, tenant_id=None,
+                  tenant=None, role_id=None, role=None, profile=None,
+                  **connection_args):
     '''
     Add role for user in tenant (keystone user-role-add)
 
@@ -811,25 +825,31 @@ def user_role_add(user_id=None, user=None,
             role_id=ce377245c4ec9b70e1c639c89e8cead4
         salt '*' keystone.user_role_add user=admin tenant=admin role=admin
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     if user:
-        user_id = user_get(name=user)[user]['id']
+        user_id = user_get(name=user, profile=profile,
+                           **connection_args)[user]['id']
     else:
-        user = user_get(user_id).keys()[0]['name']
+        user = user_get(user_id, profile=profile,
+                        **connection_args).keys()[0]['name']
     if not user_id:
         return {'Error': 'Unable to resolve user id'}
 
     if tenant:
-        tenant_id = tenant_get(name=tenant)[tenant]['id']
+        tenant_id = tenant_get(name=tenant, profile=profile,
+                               **connection_args)[tenant]['id']
     else:
-        tenant = tenant_get(tenant_id).keys()[0]['name']
+        tenant = tenant_get(tenant_id, profile=profile,
+                            **connection_args).keys()[0]['name']
     if not tenant_id:
         return {'Error': 'Unable to resolve tenant id'}
 
     if role:
-        role_id = role_get(name=role)[role]['id']
+        role_id = role_get(name=role, profile=profile,
+                           **connection_args)[role]['id']
     else:
-        role = role_get(role_id).keys()[0]['name']
+        role = role_get(role_id, profile=profile,
+                        **connection_args).keys()[0]['name']
     if not role_id:
         return {'Error': 'Unable to resolve role id'}
 
@@ -838,10 +858,9 @@ def user_role_add(user_id=None, user=None,
     return ret_msg.format(role, user, tenant)
 
 
-def user_role_remove(user_id=None, user=None,
-                     tenant_id=None, tenant=None,
-                     role_id=None, role=None,
-                     profile=None):
+def user_role_remove(user_id=None, user=None, tenant_id=None,
+                     tenant=None, role_id=None, role=None,
+                     profile=None, **connection_args):
     '''
     Remove role for user in tenant (keystone user-role-remove)
 
@@ -855,23 +874,28 @@ def user_role_remove(user_id=None, user=None,
             role_id=ce377245c4ec9b70e1c639c89e8cead4
         salt '*' keystone.user_role_remove user=admin tenant=admin role=admin
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     if user:
-        user_id = user_get(name=user)[user]['id']
+        user_id = user_get(name=user, profile=profile,
+                           **connection_args)[user]['id']
     else:
-        user = user_get(user_id).keys()[0]['name']
+        user = user_get(user_id, profile=profile,
+                        **connection_args).keys()[0]['name']
     if not user_id:
         return {'Error': 'Unable to resolve user id'}
 
     if tenant:
-        tenant_id = tenant_get(name=tenant)[tenant]['id']
+        tenant_id = tenant_get(name=tenant, profile=profile,
+                               **connection_args)[tenant]['id']
     else:
-        tenant = tenant_get(tenant_id).keys()[0]['name']
+        tenant = tenant_get(tenant_id, profile=profile,
+                            **connection_args).keys()[0]['name']
     if not tenant_id:
         return {'Error': 'Unable to resolve tenant id'}
 
     if role:
-        role_id = role_get(name=role)[role]['id']
+        role_id = role_get(name=role, profile=profile,
+                           **connection_args)[role]['id']
     else:
         role = role_get(role_id).keys()[0]['name']
     if not role_id:
@@ -882,11 +906,8 @@ def user_role_remove(user_id=None, user=None,
     return ret_msg.format(role, user, tenant)
 
 
-def user_role_list(user_id=None,
-                   tenant_id=None,
-                   user_name=None,
-                   tenant_name=None,
-                   profile=None):
+def user_role_list(user_id=None, tenant_id=None, user_name=None,
+                   tenant_name=None, profile=None, **connection_args):
     '''
     Return a list of available user_roles (keystone user-roles-list)
 
@@ -899,7 +920,7 @@ def user_role_list(user_id=None,
             tenant_id=7167a092ece84bae8cead4bf9d15bb3b
         salt '*' keystone.user_role_list user_name=admin tenant_name=admin
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = {}
     if user_name:
         for user in kstone.users.list():
@@ -921,7 +942,7 @@ def user_role_list(user_id=None,
     return ret
 
 
-def _item_list(profile=None):
+def _item_list(profile=None, **connection_args):
     '''
     Template for writing list functions
     Return a list of available items (keystone items-list)
@@ -932,7 +953,7 @@ def _item_list(profile=None):
 
         salt '*' keystone.item_list
     '''
-    kstone = auth(profile)
+    kstone = auth(profile, **connection_args)
     ret = []
     for item in kstone.items.list():
         ret.append(item.__dict__)
