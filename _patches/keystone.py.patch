diff --git a/salt/modules/keystone.py b/salt/modules/keystone.py
index 93d594a..ad30273 100644
--- a/salt/modules/keystone.py
+++ b/salt/modules/keystone.py
@@ -9,7 +9,6 @@ Module for handling openstack keystone calls.
         keystone.password: verybadpass
         keystone.tenant: admin
         keystone.tenant_id: f80919baedab48ec8931f200c65a50df
-        keystone.insecure: False   #(optional)
         keystone.auth_url: 'http://127.0.0.1:5000/v2.0/'
 
         OR (for token based authentication)
@@ -39,43 +38,59 @@ def __virtual__():
 __opts__ = {}
 
 
-def auth():
+def auth(**connection):
     '''
     Set up keystone credentials
 
     Only intended to be used within Keystone-enabled modules
     '''
-    user = __salt__['config.option']('keystone.user')
-    password = __salt__['config.option']('keystone.password')
-    tenant = __salt__['config.option']('keystone.tenant')
-    tenant_id = __salt__['config.option']('keystone.tenant_id')
-    auth_url = __salt__['config.option']('keystone.auth_url')
-    insecure = __salt__['config.option']('keystone.insecure')
-    token = __salt__['config.option']('keystone.token')
-    endpoint = __salt__['config.option']('keystone.endpoint')
-
-    kwargs = {}
-    if token:
-        kwargs = {
-                'token': token,
-                'endpoint': endpoint,
-                }
+    connargs = {}
+    def _connarg(name,key=None):
+        '''
+        Add key to connargs if the name exists in kwargs (connection), or 
+        fallback to minion config values. If args are given they are expected to
+        be in the form: 'connection_<param>'. This function for the time being 
+        returns the value inserted into connargs.
+        '''
+        if key is None:
+            key = name
+        if name in connection:
+            val = connection[name]
+            connargs[key] = val
+        else:
+            val = __salt__['config.option']('keystone.{0}'.format(key),None)
+            if val is not None:
+                connargs[key] = val
+        return val
+
+    def _collect(keys,from_dict):
+        tmp = {}
+        for key in keys:
+            tmp[key] = from_dict.get(key)
+        return tmp
+
+    _connarg('connection_user','user')
+    _connarg('connection_pass', 'password')
+    _connarg('connection_tenant','tenant')
+    _connarg('connection_tenant_id', 'tenant_id')
+    _connarg('connection_auth_url', 'auth_url')
+    _connarg('connection_token', 'token')
+    _connarg('connection_endpoint', 'endpoint')
+    _connarg('connection_insecure', 'insecure')
+
+    if connargs.get('token') is not None:
+        keys = ['token','endpoint']
+        
     else:
-        kwargs = {
-                'username': user,
-                'password': password,
-                'tenant_name': tenant,
-                'tenant_id': tenant_id,
-                'auth_url': auth_url,
-                'insecure': insecure,
-                }
-
+        keys = ['username', 'password','tenant_name','tenant_id', 'auth_url']
+    
+    kwargs = _collect(keys,from_dict=connargs)
     return client.Client(**kwargs)
 
 
 def ec2_credentials_get(id=None,       # pylint: disable=C0103
                         name=None,
-                        access=None):  # pylint: disable=C0103
+                        access=None,**connargs):  # pylint: disable=C0103
     '''
     Return ec2_credentials for a user (keystone ec2-credentials-get)
 
@@ -87,7 +102,7 @@ def ec2_credentials_get(id=None,       # pylint: disable=C0103
         salt '*' keystone.ec2_credentials_get id=c965f79c4f864eaaa9c3b41904e67082 access=722787eb540849158668370dc627ec5f
         salt '*' keystone.ec2_credentials_get name=nova access=722787eb540849158668370dc627ec5f
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     if name:
         for user in kstone.users.list():
@@ -103,12 +118,12 @@ def ec2_credentials_get(id=None,       # pylint: disable=C0103
             'user_id': ec2_credentials.user_id,
             'tenant': ec2_credentials.tenant_id,
             'access': ec2_credentials.access,
-            'secret': ec2_credentials.secret,
+            'secret': ec2_credentials.secret
             }
     return ret
 
 
-def ec2_credentials_list(id=None, name=None):  # pylint: disable=C0103
+def ec2_credentials_list(id=None, name=None, **connargs):  # pylint: disable=C0103
     '''
     Return a list of ec2_credentials for a specific user (keystone ec2-credentials-list)
 
@@ -120,7 +135,7 @@ def ec2_credentials_list(id=None, name=None):  # pylint: disable=C0103
         salt '*' keystone.ec2_credentials_list id=298ce377245c4ec9b70e1c639c89e654
         salt '*' keystone.ec2_credentials_list name=jack
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     if name:
         for user in kstone.users.list():
@@ -139,7 +154,7 @@ def ec2_credentials_list(id=None, name=None):  # pylint: disable=C0103
     return ret
 
 
-def endpoint_get(service):
+def endpoint_get(service, **connargs):
     '''
     Return a specific endpoint (keystone endpoint-get)
 
@@ -149,11 +164,11 @@ def endpoint_get(service):
 
         salt '*' keystone.endpoint_get ec2
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     return kstone.service_catalog.url_for(service_type=service)
 
 
-def endpoint_list():
+def endpoint_list(**connargs):
     '''
     Return a list of available endpoints (keystone endpoints-list)
 
@@ -163,7 +178,7 @@ def endpoint_list():
 
         salt '*' keystone.endpoint_list
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     for endpoint in kstone.endpoints.list():
         ret[endpoint.id] = {
@@ -176,8 +191,19 @@ def endpoint_list():
                 }
     return ret
 
+def endpoint_create(name,service_id,publicurl,
+                    internalurl,region="RegionOne",adminurl=None, **connargs):
+    kstone = auth(**connargs)
+    endpoint = kstone.endpoints.create(
+        region,
+        service_id,
+        publicurl,
+        internalurl,
+        adminurl
+    )
+    return endpoint
 
-def role_get(id=None, name=None):  # pylint: disable=C0103
+def role_get(id=None, name=None,**connargs):  # pylint: disable=C0103
     '''
     Return a specific roles (keystone role-get)
 
@@ -189,7 +215,7 @@ def role_get(id=None, name=None):  # pylint: disable=C0103
         salt '*' keystone.role_get id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.role_get name=nova
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     if name:
         for role in kstone.roles.list():
@@ -201,12 +227,12 @@ def role_get(id=None, name=None):  # pylint: disable=C0103
     role = kstone.roles.get(id)
     ret[role.name] = {
             'id': role.id,
-            'name': role.name,
+            'name': role.name
             }
     return ret
 
 
-def role_list():
+def role_list(**connargs):
     '''
     Return a list of available roles (keystone role-list)
 
@@ -216,7 +242,7 @@ def role_list():
 
         salt '*' keystone.role_list
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     for role in kstone.roles.list():
         ret[role.name] = {
@@ -226,7 +252,7 @@ def role_list():
     return ret
 
 
-def service_get(id=None, name=None):  # pylint: disable=C0103
+def service_get(id=None, name=None,**connargs):  # pylint: disable=C0103
     '''
     Return a specific services (keystone service-get)
 
@@ -238,7 +264,7 @@ def service_get(id=None, name=None):  # pylint: disable=C0103
         salt '*' keystone.service_get id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.service_get name=nova
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     if name:
         for service in kstone.services.list():
@@ -252,12 +278,12 @@ def service_get(id=None, name=None):  # pylint: disable=C0103
             'id': service.id,
             'name': service.name,
             'type': service.type,
-            'description': service.description,
+            'description': service.description
             }
     return ret
 
 
-def service_list():
+def service_list(**connargs):
     '''
     Return a list of available services (keystone services-list)
 
@@ -267,19 +293,28 @@ def service_list():
 
         salt '*' keystone.service_list
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     for service in kstone.services.list():
         ret[service.name] = {
                 'id': service.id,
                 'name': service.name,
                 'description': service.description,
-                'type': service.type,
+                'type': service.type
                 }
     return ret
 
+def service_create(name,service_type=None,description=None, **connargs):
+    # We assume that the type is a valid type.
+    kstone = auth(**connargs)
+    service = kstone.services.create(
+        name,
+        service_type,
+        description
+    )
+    return service_get(id=service.id, **connargs)
 
-def tenant_get(id=None, name=None):  # pylint: disable=C0103
+def tenant_get(id=None, name=None, **connargs):  # pylint: disable=C0103
     '''
     Return a specific tenants (keystone tenant-get)
 
@@ -291,7 +326,7 @@ def tenant_get(id=None, name=None):  # pylint: disable=C0103
         salt '*' keystone.tenant_get id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.tenant_get name=nova
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     if name:
         for tenant in kstone.tenants.list():
@@ -305,12 +340,12 @@ def tenant_get(id=None, name=None):  # pylint: disable=C0103
             'id': tenant.id,
             'name': tenant.name,
             'description': tenant.description,
-            'enabled': tenant.enabled,
+            'enabled': tenant.enabled
             }
     return ret
 
 
-def tenant_list():
+def tenant_list(**connargs):
     '''
     Return a list of available tenants (keystone tenants-list)
 
@@ -320,7 +355,7 @@ def tenant_list():
 
         salt '*' keystone.tenant_list
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     for tenant in kstone.tenants.list():
         ret[tenant.name] = {
@@ -331,8 +366,25 @@ def tenant_list():
                 }
     return ret
 
+def tenant_create(name,description=None,enabled=True, **connargs):
+    '''
+    Create a tenant
+
+    CLI Examples::
+
+        salt '*' keystone.tenant_create name=tenant1 description='Tenant 1'
 
-def token_get():
+    '''
+
+    kstone = auth(**connargs)
+    tenant = kstone.tenants.create(
+        name,
+        description,
+        enabled
+    )
+    return tenant_get(id=tenant.id, **connargs)
+
+def token_get(**connargs):
     '''
     Return the configured tokens (keystone token-get)
 
@@ -342,7 +394,7 @@ def token_get():
 
         salt '*' keystone.token_get c965f79c4f864eaaa9c3b41904e67082
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     token = kstone.service_catalog.get_token()
     return {
             'id': token['id'],
@@ -352,7 +404,7 @@ def token_get():
             }
 
 
-def user_list():
+def user_list(**connargs):
     '''
     Return a list of available users (keystone user-list)
 
@@ -362,7 +414,7 @@ def user_list():
 
         salt '*' keystone.user_list
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     for user in kstone.users.list():
         ret[user.name] = {
@@ -375,7 +427,7 @@ def user_list():
     return ret
 
 
-def user_get(id=None, name=None):  # pylint: disable=C0103
+def user_get(id=None, name=None,**connargs):  # pylint: disable=C0103
     '''
     Return a specific users (keystone user-get)
 
@@ -387,7 +439,7 @@ def user_get(id=None, name=None):  # pylint: disable=C0103
         salt '*' keystone.user_get id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.user_get name=nova
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     if name:
         for user in kstone.users.list():
@@ -407,7 +459,7 @@ def user_get(id=None, name=None):  # pylint: disable=C0103
     return ret
 
 
-def user_create(name, password, email, tenant_id=None, enabled=True):
+def user_create(name, password, email, tenant_id=None, enabled=True, **connargs):
     '''
     Create a user (keystone user-create)
 
@@ -417,18 +469,18 @@ def user_create(name, password, email, tenant_id=None, enabled=True):
 
         salt '*' keystone.user_create name=jack password=zero email=jack@halloweentown.org tenant_id=a28a7b5a999a455f84b1f5210264375e enabled=True
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     item = kstone.users.create(
-        name=name,
-        password=password,
-        email=email,
-        tenant_id=tenant_id,
-        enabled=enabled,
+        name,
+        password,
+        email,
+        tenant_id,
+        enabled,
         )
-    return user_get(item.id)
+    return user_get(item.id, **connargs)
 
 
-def user_delete(id=None, name=None):  # pylint: disable=C0103
+def user_delete(id=None, name=None, **connargs):  # pylint: disable=C0103
     '''
     Delete a user (keystone user-delete)
 
@@ -440,7 +492,7 @@ def user_delete(id=None, name=None):  # pylint: disable=C0103
         salt '*' keystone.user_delete id=c965f79c4f864eaaa9c3b41904e67082
         salt '*' keystone.user_delete name=nova
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     if name:
         for user in kstone.users.list():
             if user.name == name:
@@ -458,7 +510,7 @@ def user_delete(id=None, name=None):  # pylint: disable=C0103
 def user_update(id=None,        # pylint: disable=C0103
                 name=None,
                 email=None,
-                enabled=None):  # pylint: disable=C0103
+                enabled=None, **connargs):  # pylint: disable=C0103
     '''
     Update a user's information (keystone user-update)
     The following fields may be updated: name, email, enabled.
@@ -471,7 +523,7 @@ def user_update(id=None,        # pylint: disable=C0103
         salt '*' keystone.user_update id=c965f79c4f864eaaa9c3b41904e67082 name=newname
         salt '*' keystone.user_update c965f79c4f864eaaa9c3b41904e67082 name=newname email=newemail@domain.com
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     if not id:
         return {'Error': 'Unable to resolve user id'}
     kstone.users.update(user=id, name=name, email=email, enabled=enabled)
@@ -481,7 +533,7 @@ def user_update(id=None,        # pylint: disable=C0103
 
 def user_password_update(id=None,         # pylint: disable=C0103
                          name=None,
-                         password=None):  # pylint: disable=C0103
+                         password=None,**connargs):  # pylint: disable=C0103
     '''
     Update a user's password (keystone user-password-update)
 
@@ -493,7 +545,7 @@ def user_password_update(id=None,         # pylint: disable=C0103
         salt '*' keystone.user_delete id=c965f79c4f864eaaa9c3b41904e67082 password=12345
         salt '*' keystone.user_delete name=nova password=12345
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     if name:
         for user in kstone.users.list():
             if user.name == name:
@@ -504,6 +556,7 @@ def user_password_update(id=None,         # pylint: disable=C0103
     kstone.users.update_password(user=id, password=password)
     ret = 'Password updated for user ID {0}'.format(id)
     if name:
+
         ret += ' ({0})'.format(name)
     return ret
 
@@ -511,7 +564,7 @@ def user_password_update(id=None,         # pylint: disable=C0103
 def user_role_list(user_id=None,
                    tenant_id=None,
                    user_name=None,
-                   tenant_name=None):
+                   tenant_name=None, **connargs):
     '''
     Return a list of available user_roles (keystone user_roles-list)
 
@@ -524,7 +577,7 @@ def user_role_list(user_id=None,
             tenant_id=7167a092ece84bae8cead4bf9d15bb3b
         salt '*' keystone.user_role_list user_name=admin tenant_name=admin
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = {}
     if user_name:
         for user in kstone.users.list():
@@ -548,7 +601,7 @@ def user_role_list(user_id=None,
     return ret
 
 
-def _item_list():
+def _item_list(**connargs):
     '''
     Template for writing list functions
     Return a list of available items (keystone items-list)
@@ -559,7 +612,7 @@ def _item_list():
 
         salt '*' keystone.item_list
     '''
-    kstone = auth()
+    kstone = auth(**connargs)
     ret = []
     for item in kstone.items.list():
         ret.append(item.__dict__)
@@ -577,13 +630,11 @@ def _item_list():
     #                    Create EC2-compatible credentials for user per tenant
     #ec2-credentials-delete
     #                    Delete EC2-compatible credentials
-    #endpoint-create     Create a new endpoint associated with a service
     #endpoint-delete     Delete a service endpoint
     #role-create         Create new role
     #role-delete         Delete role
     #service-create      Add service to Service Catalog
     #service-delete      Delete service from Service Catalog
-    #tenant-create       Create new tenant
     #tenant-delete       Delete tenant
     #tenant-update       Update tenant name, description, enabled status
     #user-role-add       Add role to user
