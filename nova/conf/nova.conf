{% set openstack = salt['pillar.get']('openstack') -%}
{% set nova = openstack['nova'] -%}
{% set neutron = openstack['neutron'] -%}
{% set rabbit = openstack['rabbit'] -%}
{% set glance = openstack['glance'] -%}
[DEFAULT]
{% if openstack.get('logging') -%}
verbose={{ openstack['logging'].get('verbose') and 'True' or 'False' }}
debug={{ openstack['logging'].get('debug') and 'True' or 'False' }}
{% endif -%}
dhcpbridge_flagfile=/etc/nova/nova.conf
dhcpbridge=/usr/bin/nova-dhcpbridge
logdir=/var/log/nova
state_path=/var/lib/nova
lock_path=/var/lock/nova
force_dhcp_release=True
libvirt_use_virtio_for_bridges=True
connection_type=libvirt
root_helper=sudo nova-rootwrap /etc/nova/rootwrap.conf
ec2_private_dns_show_ip=True
api_paste_config=/etc/nova/api-paste.ini
volumes_path=/var/lib/nova/volumes
enabled_apis=ec2,osapi_compute,metadata

libvirt_type=kvm
compute_driver=libvirt.LibvirtDriver

sql_connection = {{ openstack['db']['proto'] }}://{{ nova['db']['username'] }}:{{ nova['db']['password'] }}@{{ openstack['db']['server'] }}:{{ openstack['db']['port'] }}/{{ nova['db']['name'] }}

workers = {{ nova.get('workers') or grains['num_cpus'] }}
scheduler_driver = nova.scheduler.filter_scheduler.FilterScheduler
allow_admin_api = true
{% if openstack.get('memcached') %}
memcached_servers={{ openstack['memcached'] | join(',') }}
{% endif %}
metadata_listen=0.0.0.0
metadata_host={{ nova['metadata']['server'] }}

network_api_class=nova.network.neutronv2.api.API
neutron_url={{ neutron['server'].get('proto','http') }}://{{ neutron['server']['server'] }}:{{ neutron['server'].get('port','9696') }}
neutron_auth_strategy = keystone
neutron_admin_tenant_name = {{ openstack['auth']['service'] }}
neutron_admin_username = {{ neutron['service']['username'] }}
neutron_admin_password = {{ neutron['service']['password'] }}
neutron_admin_auth_url={{ openstack['auth'].get('proto') }}://{{ openstack['auth']['server'] }}:{{ openstack['auth']['port'] }}/v2.0
service_neutron_metadata_proxy=True
neutron_metadata_proxy_shared_secret={{ nova['metadata']['secret'] }}

firewall_driver = nova.virt.firewall.NoopFirewallDriver
security_group_api = neutron

libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver
linuxnet_interface_driver=nova.network.linux_net.LinuxOVSInterfaceDriver

glance_api_servers={{ glance['api']['server'] }}:{{ glance['api'].get('port','9292') }}
image_service=nova.image.glance.GlanceImageService

vnc_enabled=True
novncproxy_base_url=http://{{ nova['novnc']['server'] }}:6080/vnc_auto.html
vncserver_proxyclient_address={{ grains['openstack']['network']['osm']['addr'] }}
vncserver_listen=0.0.0.0

rabbit_host = {{ rabbit['server'] }}
rabbit_user = {{ rabbit['username'] }}
rabbit_password = {{ rabbit['password'] }}

auth_strategy = keystone

# Enable guest resume on reboot.
resume_guests_state_on_host_boot=true

[keystone_authtoken]
admin_tenant_name = {{ openstack['auth']['service'] }}
admin_user = {{ nova['service']['username'] }}
admin_password = {{ nova['service']['password'] }}
auth_host = {{ openstack['auth']['server'] }}
auth_port = {{ openstack['auth'].get('port','35357') }}
auth_protocol = {{ openstack['auth'].get('proto','http') }}

