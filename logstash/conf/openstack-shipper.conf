# -*- mode: perl -*-
# Logstash Config file for {{grains.get('host')}} as '{{role}}'
{% from 'logstash/map.jinja' import logstash with context %}
{% set services =  ['nova', 'cinder', 'quantum', 'glance', 'keystone'] %}
output {
  {% if logstash.debug -%}
  stdout { } # for debug purposes
  {% else %}
  # stdout { } # for debug purposes
  {% endif -%}

  redis {
    host => '{{logstash.redis_host}}'
    data_type => 'list'
    key => 'logstash'
  }
}


input {
  # Specific to openstack host OS - Ubuntu
  file {
    # Spaces denote a multiline.
    type => 'salt'
    path => ['/var/log/salt/minion', '/var/log/master']
    exclude => ['*.gz']

  }
  file {
    type => 'syslog'
    path => ['/var/log/syslog',
             '/var/log/kern.log',
             '/var/log/auth.log',
             '/var/log/']
    exclude => ['*.gz']
  }
  {% for service in services %}
  file {
    type => '{{service}}'
    path => ['/var/log/{{service}}/*',
             '/var/log/upstart/{{service}}*']
    exclude => ['*.gz','*.log.1','dnsmasq.log']
  }
  {% endfor %}
  file {
    type => 'quantum-dnsmasq'
    path => ['/var/log/quantum/dnsmasq.log']
    exclude => ['*.gz']
  }
}


filter {
  # Going to develop the openstack patterns later on.

  ######
  # Syslog
  ######
  grok {
    type => 'syslog'
    match => ['message', '%{SYSLOGLINE}']
    add_tag => ['grokked']
  }
  date {
    type => 'syslog'
    match => ['timestamp', 'MMM dd HH:mm:ss']
    add_tag => ['dated']
  }

  ######
  # Salt
  ######
  multiline {
    type => 'salt'
    pattern => '^\s+'
    what => 'previous'
    add_tag => ['multiline']
  }
  grok {
    type => 'salt'
    patterns_dir => ['{{logstash.patterns}}']
    match => ['message', '%{SALTLOG}']
    add_tag => ['grokked']
  }

  date {
    type => 'salt'
    match => ['timestamp', 'yyyy-MM-dd HH:mm:ss,SSS']
  }

  ######
  # Openstack
  ######

  # Openstack Multilines, then do processing.
  multiline {
    type => 'quantum'
    pattern => '^(Command|Exit code|Stdout|Stderr|Accept-Encoding|Content-Length|Content-Type|Host|User-Agent|X-Forwarded-For|X-Quantum-Network-Id|REQ):'
    what => 'previous'
    add_tag => ['multiline']
  }
  multiline {
    type => 'quantum'
    pattern => '^[\w\-_\.]*/?$'
    what => 'previous'
    add_tag => ['multiline']
  }
  multiline {
    type => 'keystone'
    pattern => '^(\s|FROM|WHERE)'
    what => 'previous'
    add_tag => ['multiline', 'sql']
  }
  # Openstack
  {% for service in services %}
  grok {
    type => '{{service}}'
    patterns_dir => ['{{logstash.patterns}}']
    match => ['message', '%{OSLOGMSG}']
    add_tag => ['grokked','{{service}}']
  }
  {% endfor %}
  grok {
    type => 'quantum-dnsmasq'
    match => ['message', '%{SYSLOGLINE}']
    add_tag => ['quantum']
  }
  date {
    # DNSmasq: Sep 23 09:37:05
    type => 'quantum-dnsmasq'
    match => ['timestamp', 'MMM dd HH:mm:ss']
    add_tag => ['dated']
  }
  date {
    # Nova: 2013-10-11 06:25:13.067
    type => 'nova'
    match => ['timestamp', 'yyyy-MM-dd HH:mm:ss.SSS']
    add_tag => ['dated']
  }
  date {
    # Quantum: 2013-10-11 06:54:52
    type => 'quantum'
    match => ['timestamp', 'yyyy-MM-dd HH:mm:ss']
    add_tag => ['dated']
  }
  date {
    # Glance: 2013-10-11 09:57:16.425
    type => 'glance'
    match => ['timestamp', 'yyyy-MM-dd HH:mm:ss.SSS']
    add_tag => ['dated']
  }
  date {
    # Cinder: 2013-10-11 06:50:46
    type => 'cinder'
    match => ['timestamp', 'yyyy-MM-dd HH:mm:ss']
    add_tag => ['dated']
  }
  date {
    # Keystone: 2013-10-11 06:48:31,075
    type => 'keystone'
    match => ['timestamp', 'yyyy-MM-dd HH:mm:ss,SSS']
    add_tag => ['dated']
  }

  # Openstack Tagging
  grep {
    type => 'quantum'
    drop => false
    ignore_case => true
    match => ['class', 'quantum\.agent']
    add_tag => ['quantum-agent']
  }
  grep {
    type => 'nova'
    drop => false
    ignore_case => true
    match => ['class', 'nova\.osapi_compute']
    add_tag => ['nova-api']
  }
  grep {
    type => 'nova'
    drop => false
    ignore_case => true
    match => ['class', 'nova\.scheduler']
    add_tag => ['nova-scheduler']
  }
  grep {
    type => 'nova'
    drop => false
    ignore_case => true
    match => ['class', 'nova\.compute']
    add_tag => ['nova-compute']
  }
}